@import './assets/colors.scss';

$blockSize: 2em;
//$blockSize: 6vmin; // Try this in Firefox! Viewport based size, which doesn't work in Canary at the moment

$delay: 0.065s;
$duration: 0.88s;
$startingColor: #fdfdfd;
$endingColor: $gold;

// Calculate some values
$blockMargin: $blockSize / 3;
$loaderSize: $blockSize * 3 + $blockMargin * 2;

@mixin animation-delay($delay) {
	-webkit-animation-delay: $delay;
	animation-delay: $delay;
}

@mixin animation($ani1: null, $ani2: null) {
	@if ($ani2 != null) {
		-webkit-animation: $ani1, $ani2;
		animation: $ani1, $ani2;
	} @else if ($ani1 != null) {
		-webkit-animation: $ani1;
		animation: $ani1;
	}
}

.loader {
	position: absolute;
	top: 50%;
	left: 50%;
	width: $loaderSize;
	height: $loaderSize;
	margin-left: -$loaderSize/2;
	margin-top: -$loaderSize/2;
}

.loader_block {
	position: absolute;
	top: 0;
	left: 0;
	display: inline-block;
	opacity: 0;
	width: $blockSize;
	height: $blockSize;
	background: $startingColor;
	@include animation(
		show $duration step-end infinite alternate,
		pulse $duration linear infinite alternate
	);
}

// Second
.loader_block:nth-child(1) {
	transform: translate(0, 0);
	@include animation-delay(1 * $delay);
}

// Ninth
.loader_block:nth-child(2) {
	transform: translate($blockSize + $blockMargin, 0);
	@include animation-delay(2 * $delay);
}

// Fourth
.loader_block:nth-child(3) {
	transform: translate(($blockSize * 2) + ($blockMargin * 2), 0);
	@include animation-delay(3 * $delay);
}

// Sixth
.loader_block:nth-child(4) {
	transform: translate(0, $blockSize + $blockMargin);
	@include animation-delay(5 * $delay);
}

// Third
.loader_block:nth-child(5) {
	transform: translate($blockSize + $blockMargin, $blockSize + $blockMargin);
	@include animation-delay(2 * $delay);
}

// Eighth
.loader_block:nth-child(6) {
	transform: translate(
		($blockSize * 2) + ($blockMargin * 2),
		$blockSize + $blockMargin
	);
	@include animation-delay(7 * $delay);
}

// Seventh
.loader_block:nth-child(7) {
	transform: translate(0, ($blockSize * 2) + ($blockMargin * 2));
	@include animation-delay(6 * $delay);
}

// Fifth
.loader_block:nth-child(8) {
	transform: translate(
		$blockSize + $blockMargin,
		($blockSize * 2) + ($blockMargin * 2)
	);
	@include animation-delay(4 * $delay);
}

// First
.loader_block:nth-child(9) {
	transform: translate(
		($blockSize * 2) + ($blockMargin * 2),
		($blockSize * 2) + ($blockMargin * 2)
	);
}

@-webkit-keyframes pulse {
	from,
	40% {
		background: $startingColor;
	}
	to {
		background: $endingColor;
	}
}

@-webkit-keyframes show {
	from,
	40% {
		opacity: 0;
	}
	41%,
	to {
		opacity: 1;
	}
}

@keyframes pulse {
	from,
	40% {
		background: $startingColor;
	}
	to {
		background: $endingColor;
	}
}

@keyframes show {
	from,
	40% {
		opacity: 0;
	}
	41%,
	to {
		opacity: 1;
	}
}
